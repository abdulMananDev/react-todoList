[{"M:\\to-do-list\\app\\src\\index.js":"1","M:\\to-do-list\\app\\src\\App.js":"2","M:\\to-do-list\\app\\src\\reportWebVitals.js":"3","M:\\to-do-list\\app\\src\\components\\List.js":"4","M:\\to-do-list\\app\\src\\components\\FlashMessages.js":"5"},{"size":449,"mtime":1610095655537,"results":"6","hashOfConfig":"7"},{"size":1552,"mtime":1610203853733,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1607494364400,"results":"9","hashOfConfig":"7"},{"size":3125,"mtime":1610203972043,"results":"10","hashOfConfig":"7"},{"size":200,"mtime":1610203439688,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"mvxgqj",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"M:\\to-do-list\\app\\src\\index.js",[],["24","25"],"M:\\to-do-list\\app\\src\\App.js",[],"M:\\to-do-list\\app\\src\\reportWebVitals.js",[],"M:\\to-do-list\\app\\src\\components\\List.js",["26","27"],"import React, { useState, useEffect } from \"react\";\r\nimport FlashMessages from \"./FlashMessages\";\r\nconst List = props => {\r\n  const [flag, setFlag] = useState(0);\r\n  const [updateflag, setUpdateFlag] = useState(0);\r\n  const [updationValue, setUpdationValue] = useState();\r\n  const [index, setIndex] = useState(0);\r\n\r\n  const handleComplete = () => {\r\n    setFlag(prev => !prev);\r\n  };\r\n\r\n  const handleDelete = e => {\r\n    props.setTodoValue(prev =>\r\n      prev.filter(filterz => {\r\n        return prev.indexOf(filterz) !== +e.target.id;\r\n      })\r\n    );\r\n  };\r\n  const handleUpdate = e => {\r\n    // console.log(e.target.id);\r\n\r\n    setIndex(prev => (prev = e.target.id));\r\n    setUpdateFlag(prev => (prev = 1));\r\n    setUpdationValue(prev => (prev = props.todoValue));\r\n  };\r\n  const handleUpdationX = e => {\r\n    console.log(\"her\");\r\n    setUpdationValue(prev => (prev = e.target.value));\r\n  };\r\n  const update = () => {\r\n    if (updationValue === \"\") {\r\n      return;\r\n    }\r\n    props.setTodoValue(prev => {\r\n      console.log(updationValue);\r\n      prev[index] = updationValue;\r\n      return prev.map(data => {\r\n        return data;\r\n      });\r\n    });\r\n    setUpdationValue(prev => (prev = \"\"));\r\n    setUpdateFlag(prev => (prev = 0));\r\n  };\r\n  return (\r\n    <>\r\n      <>\r\n        {updateflag ? (\r\n          <div className=\"update-wrapper\">\r\n            <div className=\"update\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"input\"\r\n                placeholder=\"update-value\"\r\n                id=\"\"\r\n                value={updationValue}\r\n                onChange={handleUpdationX}\r\n                spellCheck=\"false\"\r\n                autoFocus\r\n                autoCapitalize\r\n              />\r\n\r\n              <button className=\"update-btn\" onClick={update}>\r\n                Update\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </>\r\n\r\n      <div className=\"todoList-wrapper\">\r\n        <div className=\"todoList\">\r\n          {flag ? (\r\n            <span\r\n              className=\"todo-item\"\r\n              style={{ textDecoration: \"line-through\" }}\r\n            >\r\n              {props.todoValue}\r\n            </span>\r\n          ) : (\r\n            <span className=\"todo-item\"> {props.todoValue}</span>\r\n          )}\r\n        </div>\r\n        <div className=\"todo-controls\">\r\n          {!flag ? (\r\n            <button className=\"update-btn\">\r\n              <span id={props.hello} onClick={handleUpdate}>\r\n                Update\r\n              </span>\r\n            </button>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <button className=\"complete-btn\">\r\n            <span onClick={handleComplete}>\r\n              {flag ? \"Completed\" : \"Complete\"}\r\n            </span>\r\n          </button>\r\n\r\n          {flag ? (\r\n            <button className=\"delete-btn\">\r\n              <span id={props.hello} onClick={handleDelete}>\r\n                Delete\r\n              </span>\r\n            </button>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default List;\r\n","M:\\to-do-list\\app\\src\\components\\FlashMessages.js",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":1,"column":27,"nodeType":"34","messageId":"35","endLine":1,"endColumn":36},{"ruleId":"32","severity":1,"message":"36","line":2,"column":8,"nodeType":"34","messageId":"35","endLine":2,"endColumn":21},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'FlashMessages' is defined but never used.","no-global-assign","no-unsafe-negation"]